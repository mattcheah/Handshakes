require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {first: "Matt", last: "Cheah", email: "matt.cheah123@gmail.com", password: "mypasswordhere"}
  }
  let(:new_attributes) {
    {first: "Matt2", last: "Cheah2", email: "matt.cheah123@gmail.com", password: "mypasswordhere"}
  }

  let(:invalid_attributes) {
    {first: "", last: "", email: "ma", password: "mypwh"}
  }
  
  context "When not logged in" do
  
    before(:each) do
      @user1 = create(:user)
    end
  
    describe "GET #index" do
      it "returns a success response" do
        get :index
        expect(response).to be_success
      end
    end
  
    describe "GET #show" do
      it "returns a success response" do
        get :show, {:id => @user1.id}
        expect(response).to be_success
      end
    end
  
    # describe "GET #edit" do
    #   it "is not successful" do
    #     get :edit, {:id => @user1.id}
    #     expect(response).to_not be_success
    #     expect(response).to redirect_to(new_user_session_path)
    #   end
    # end
  
    # describe "POST #create" do
    #   context "with valid params" do
    #     it "creates a new User" do
    #       expect {
    #         create(:user)
    #       }.to change(User, :count).by(1)
    #     end
  
    #     it "redirects to the created user" do
    #       create(:user)
    #       expect(response).to render_template("show")
    #     end
    #   end
  
    #   context "with invalid params" do
    #     before(:each) do
    #       post :create, :params => { :user => invalid_attributes }
    #     end
        
    #     it "returns a success response (i.e. to display the 'new' template)" do
    #       expect(response).to be_success
    #       expect(response).to render_template(new_user_registration_path)
    #     end
        
    #     it "does not create a new user" do
    #       expect(User.last.first).to_not be "Matt2"
    #     end          
    #   end
    # end
  end #end not logged in context
    
  context "when not logged in" do
    
  end
  
  context "when logged in" do
    login_user
    
    # describe "PUT #update" do
    #   context "with valid params" do
  
    #     it "updates the requested user" do
          
    #       put :update, :params => {:id => @user.id, :user => new_attributes}
    #       expect(@user.first).to be "Matt2"
    #       expect(@user.last).to be "Cheah2"
    #     end
  
    #     it "redirects to the user" do
    #       put :update, :params => {:id => @user.id, :user => new_attributes}
    #       expect(response).to redirect_to(@user)
    #     end
    #   end
  
    #   context "with invalid params" do
    #     it "returns a success response (i.e. to display the 'edit' template)" do
    #       user = User.create! valid_attributes
    #       put :update, {:id => user.to_param, :user => invalid_attributes}
    #       expect(response).to be_success
    #       expect(response).to redirect_to(edit_user_registration)
    #     end
        
    #     it "does not create make any changes" do 
    #       user = User.create! valid_attributes
    #       put :update, {:id => user.to_param, :user => invalid_attributes}
    #       user.reload
    #       expect(user.first).to_not be "Matt2"
    #       expect(user.last).to_not be "Cheah2"
    #     end
    #   end
    # end
    
  end
  
    
    
  
    # describe "DELETE #destroy" do
      
    #   before(:each) do
    #     @user = User.create! valid_attributes
    #   end
      
    #   context "when logged in" do
        
    #     it "destroys the requested user" do
    #       expect {
    #         delete :destroy, {:id => @user.to_param}
    #       }.to change(User, :count).by(-1)
    #     end
    
    #     it "redirects to the users list" do
    #       delete :destroy, {:id => @user.to_param}
    #       expect(response).to redirect_to(users_url)
    #     end
        
    #   end
      
    #   context "when not logged in" do

    #     it "does not destroy the requested user" do
    #       expect {
    #         delete :destroy, {:id => @user.to_param}
    #       }.to_not change(User, :count)
    #     end
    
    #     it "redirects to the users list" do
    #       delete :destroy, {:id => @user.to_param}
    #       expect(response).to redirect_to(@user)
    #     end
    #   end
      
    # end
    
end
